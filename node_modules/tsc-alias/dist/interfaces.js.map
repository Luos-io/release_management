{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { Output, PathCache, TrieNode } from './utils';\n\nexport interface IRawTSConfig {\n  extends?: string;\n  compilerOptions?: ITSConfig;\n  'tsc-alias': {\n    replacers?: ReplacerOptions;\n    resolveFullPaths?: boolean;\n    verbose?: boolean;\n  };\n}\n\nexport type PathLike = {\n  [key: string]: string[];\n};\n\nexport type StringReplacer = (importStatement: string) => string;\n\nexport interface ITSConfig {\n  baseUrl?: string;\n  outDir?: string;\n  declarationDir?: string;\n  paths?: PathLike;\n  replacers?: ReplacerOptions;\n  resolveFullPaths?: boolean;\n  verbose?: boolean;\n}\n\nexport interface IProjectConfig {\n  configFile: string;\n  baseUrl: string;\n  outDir: string;\n  configDir: string;\n  outPath: string;\n  confDirParentFolderName: string;\n  hasExtraModule: boolean;\n  configDirInOutPath: string;\n  relConfDirPathInOutPath: string;\n  pathCache: PathCache;\n}\n\nexport interface IConfig extends IProjectConfig {\n  output: Output;\n  aliasTrie: TrieNode<Alias>;\n  replacers: AliasReplacer[];\n}\n\nexport interface ReplaceTscAliasPathsOptions {\n  configFile?: string;\n  outDir?: string;\n  declarationDir?: string;\n  watch?: boolean;\n  verbose?: boolean;\n  resolveFullPaths?: boolean;\n  replacers?: string[];\n  output?: Output;\n  aliasTrie?: TrieNode<Alias>;\n}\n\nexport interface Alias {\n  shouldPrefixMatchWildly: boolean;\n  prefix: string;\n  paths: AliasPath[];\n}\n\nexport interface AliasPath {\n  basePath: string;\n  path: string;\n  isExtra: boolean;\n}\n\nexport type Assertion = (claim: any, message: string) => asserts claim;\n\nexport interface AliasReplacerArguments {\n  orig: string;\n  file: string;\n  config: IConfig;\n}\n\nexport type AliasReplacer = (args: AliasReplacerArguments) => string;\n\nexport interface ReplacerOptions {\n  [key: string]: {\n    enabled: boolean;\n    file?: string;\n  };\n}\n"]}