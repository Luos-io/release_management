{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/helpers/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { Json } from 'mylas';\nimport * as findNodeModulesPath from 'find-node-modules';\nimport * as fs from 'fs';\nimport { dirname, join } from 'path';\nimport { IRawTSConfig, ITSConfig } from '../interfaces';\n\nexport const loadConfig = (file: string): ITSConfig => {\n  if (!fs.existsSync(file)) {\n    console.error(\n      //[BgRed] Error: [Reset] [FgRed_]File ${file} not found[Reset]\n      `\\x1b[41mtsc-alias error:\\x1b[0m \\x1b[31mFile ${file} not found\\x1b[0m\\n`\n    );\n    process.exit();\n  }\n  const {\n    extends: ext,\n    compilerOptions: { baseUrl, outDir, declarationDir, paths } = {\n      baseUrl: undefined,\n      outDir: undefined,\n      declarationDir: undefined,\n      paths: undefined\n    },\n    'tsc-alias': TSCAliasConfig\n  } = Json.loadS<IRawTSConfig>(file, true);\n\n  const config: ITSConfig = {};\n  if (baseUrl) config.baseUrl = baseUrl;\n  if (outDir) config.outDir = outDir;\n  if (paths) config.paths = paths;\n  if (declarationDir) config.declarationDir = declarationDir;\n  if (TSCAliasConfig?.replacers) config.replacers = TSCAliasConfig.replacers;\n  if (TSCAliasConfig?.resolveFullPaths)\n    config.resolveFullPaths = TSCAliasConfig.resolveFullPaths;\n  if (TSCAliasConfig?.verbose) config.verbose = TSCAliasConfig.verbose;\n\n  if (ext) {\n    return {\n      ...(ext.startsWith('.')\n        ? loadConfig(\n            join(dirname(file), ext.endsWith('.json') ? ext : `${ext}.json`)\n          )\n        : loadConfig(resolveTsConfigExtendsPath(ext, file))),\n      ...config\n    };\n  }\n\n  return config;\n};\n\nexport function resolveTsConfigExtendsPath(ext: string, file: string): string {\n  const tsConfigDir = dirname(file);\n  const node_modules: string[] = findNodeModulesPath({ cwd: tsConfigDir }); // Getting all node_modules directories.\n  const targetPaths = node_modules.map((v) => join(tsConfigDir, v, ext)); // Mapping node_modules to target paths.\n\n  // Recursively checking ancestor directories for tsconfig.\n  for (const targetPath of targetPaths) {\n    if (ext.endsWith('.json')) {\n      // Check if the file exists.\n      if (fs.existsSync(targetPath)) {\n        return targetPath;\n      } else {\n        continue; // Continue checking when ext is a file but not yet found.\n      }\n    }\n    let isDirectory = false;\n    try {\n      isDirectory = fs.lstatSync(targetPath).isDirectory();\n    } catch (err) {}\n    if (isDirectory) {\n      return join(targetPath, 'tsconfig.json');\n    } else {\n      // When target is not a file nor directory check with '.json' extension.\n      if (fs.existsSync(`${targetPath}.json`)) {\n        return `${targetPath}.json`;\n      }\n    }\n  }\n}\n"]}