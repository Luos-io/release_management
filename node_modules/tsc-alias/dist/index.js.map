{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { watch } from 'chokidar';\nimport { existsSync } from 'fs';\nimport { sync } from 'globby';\nimport * as normalizePath from 'normalize-path';\nimport { basename, dirname, isAbsolute, normalize, resolve } from 'path';\nimport { importReplacers, loadConfig, replaceAlias } from './helpers';\nimport {\n  ReplaceTscAliasPathsOptions,\n  IConfig,\n  AliasReplacer,\n  IProjectConfig\n} from './interfaces';\nimport { Output, PathCache, TrieNode } from './utils';\n\n// export interfaces for api use.\nexport { ReplaceTscAliasPathsOptions, AliasReplacer };\n\nexport async function replaceTscAliasPaths(\n  options: ReplaceTscAliasPathsOptions = {\n    watch: false,\n    verbose: false,\n    declarationDir: undefined,\n    output: undefined,\n    aliasTrie: undefined\n  }\n) {\n  const output = options.output ?? new Output(options.verbose);\n\n  const configFile = !options.configFile\n    ? resolve(process.cwd(), 'tsconfig.json')\n    : !isAbsolute(options.configFile)\n    ? resolve(process.cwd(), options.configFile)\n    : options.configFile;\n\n  output.assert(existsSync(configFile), `Invalid file path => ${configFile}`);\n\n  const {\n    baseUrl = './',\n    outDir,\n    declarationDir,\n    paths,\n    replacers,\n    resolveFullPaths,\n    verbose\n  } = loadConfig(configFile);\n\n  output.setVerbose(verbose);\n\n  if (options.resolveFullPaths || resolveFullPaths) {\n    options.resolveFullPaths = true;\n  }\n\n  const _outDir = options.outDir ?? outDir;\n  if (declarationDir && _outDir !== declarationDir) {\n    options.declarationDir ??= declarationDir;\n  }\n\n  output.assert(_outDir, 'compilerOptions.outDir is not set');\n\n  const configDir: string = normalizePath(dirname(configFile));\n\n  // config with project details and paths\n  const projectConfig: IProjectConfig = {\n    configFile: configFile,\n    baseUrl: baseUrl,\n    outDir: _outDir,\n    configDir: configDir,\n    outPath: normalizePath(normalize(configDir + '/' + _outDir)),\n    confDirParentFolderName: basename(configDir),\n    hasExtraModule: false,\n    configDirInOutPath: null,\n    relConfDirPathInOutPath: null,\n    pathCache: new PathCache(!options.watch)\n  };\n\n  const config: IConfig = {\n    ...projectConfig,\n    output: output,\n    aliasTrie:\n      options.aliasTrie ?? TrieNode.buildAliasTrie(projectConfig, paths),\n    replacers: []\n  };\n\n  // Import replacers.\n  await importReplacers(config, replacers, options.replacers);\n\n  // Finding files and changing alias paths\n  const globPattern = [\n    `${config.outPath}/**/*.{mjs,cjs,js,jsx,d.{mts,cts,ts,tsx}}`,\n    `!${config.outPath}/**/node_modules`\n  ];\n  const files = sync(globPattern, {\n    dot: true,\n    onlyFiles: true\n  });\n\n  // Make array with promises for file changes\n  // Wait for all promises to resolve\n  const replaceList = await Promise.all(\n    files.map((file) => replaceAlias(config, file, options?.resolveFullPaths))\n  );\n\n  // Count all changed files\n  const replaceCount = replaceList.filter(Boolean).length;\n\n  output.info(`${replaceCount} files were affected!`);\n  if (options.watch) {\n    output.setVerbose(true);\n    output.info('[Watching for file changes...]');\n    const filesWatcher = watch(globPattern);\n    const tsconfigWatcher = watch(config.configFile);\n    const onFileChange = async (file: string) =>\n      await replaceAlias(config, file, options?.resolveFullPaths);\n    filesWatcher.on('add', onFileChange);\n    filesWatcher.on('change', onFileChange);\n    tsconfigWatcher.on('change', () => {\n      output.clear();\n      filesWatcher.close();\n      tsconfigWatcher.close();\n      replaceTscAliasPaths(options);\n    });\n  }\n  if (options.declarationDir) {\n    replaceTscAliasPaths({\n      ...options,\n      outDir: options.declarationDir,\n      declarationDir: undefined,\n      output: config.output,\n      aliasTrie: config.aliasTrie\n    });\n  }\n}\n"]}